using Microsoft.VisualStudio.TestTools.UnitTesting;
using PinPadEmulator.Commands;
using PinPadEmulator.Commands.Requests;
using PinPadEmulator.Extensions;
using PinPadEmulator.Utils;

namespace PinPadEmulatorTests.Requests
{
	[TestClass]
	public class TableLoadRecRequestTests
	{
		[TestMethod]
		public void TestTableLoadRecRequestWith1Entry()
		{
			var request = new TableLoadRecRequest();
			request.Init(new StringReader("TLR286012841020107A000000004101000000000000000000001REDECARD CREDITO030002000200020769862074609066800773    07460906E0F0C8FF80B0F00122FC50ACA0000000000000FC50ACF80000000014R00000000000000000000000000000009F02065F2A029A039C0195059F3704FFFFFFFFFF9F3704FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFY1Z1Y3Z3"));

			Assert.AreEqual(1, request.Entries.Count);

			var aidEntry = request.Entries[0].AidIccEmv;
			Assert.IsNotNull(aidEntry);
			Assert.AreEqual(284, request.Entries[0].Length);
			Assert.AreEqual(1, aidEntry.TableId.Value);
			Assert.AreEqual(2, aidEntry.AcquirerId.Value);
			Assert.AreEqual("A0000000041010", aidEntry.AID.Value.ToHexString());
			Assert.AreEqual(1, aidEntry.ApplicationType.Value);
			Assert.AreEqual("REDECARD CREDITO", aidEntry.ApplicationLabel.Value);
			Assert.AreEqual(ApplicationPattern.IccEmv, aidEntry.TableApplicationPattern.Value);
			Assert.AreEqual("0002", aidEntry.AppVersionOption1.ToString());
			Assert.AreEqual("0002", aidEntry.AppVersionOption2.ToString());
			Assert.AreEqual("0002", aidEntry.AppVersionOption3.ToString());
			Assert.AreEqual(76, aidEntry.TerminalCountryCode.Value);
			Assert.AreEqual(986, aidEntry.TransactionCurrencyCode.Value);
			Assert.AreEqual(2, aidEntry.TransactionCurrencyExponent.Value);
			Assert.AreEqual("074609066800773", aidEntry.MerchantIdentifier.Value);
			Assert.IsNull(aidEntry.MerchantCategoryCode.Value);
			Assert.AreEqual("07460906", aidEntry.TerminalIdentification.Value);
			Assert.AreEqual("E0F0C8", aidEntry.TerminalCababilities.ToString());
			Assert.AreEqual("FF80B0F001", aidEntry.AditionalTerminalCababilities.ToString());
			Assert.AreEqual(TerminalType.OfflineWithOnlineCapabilities, aidEntry.TerminalType.Value);
			Assert.AreEqual("FC50ACA000", aidEntry.DefaultTerminalActionCode.ToString());
			Assert.AreEqual("0000000000", aidEntry.DenialTerminalActionCode.ToString());
			Assert.AreEqual("FC50ACF800", aidEntry.OnlineTerminalActionCode.ToString());
			Assert.AreEqual("00000014", aidEntry.TerminalFloorLimit.ToString());
			Assert.AreEqual("R", aidEntry.TransactionCategoryCode.Value);
			Assert.AreEqual(false, aidEntry.ContactlessSupported.Value);
			Assert.AreEqual(ContactlessCapability.Unsupported, aidEntry.ContactlessTerminalCapability.Value);
			Assert.AreEqual("00000000", aidEntry.TerminalContactlessTransactionLimit.ToString());
			Assert.AreEqual("00000000", aidEntry.TerminalContactlessFloorLimit.ToString());
			Assert.AreEqual("00000000", aidEntry.TerminalCVMRequiredLimit.ToString());
			Assert.AreEqual("0000", aidEntry.PayPassMagStripeAppVersionNumber.ToString());
			Assert.AreEqual(false, aidEntry.AllowAppSelection.Value);
			Assert.AreEqual("9F02065F2A029A039C0195059F3704FFFFFFFFFF", aidEntry.DefaultTransactionCertificateObjectList.ToString());
			Assert.AreEqual("9F3704FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", aidEntry.DefaultDynamicAuthenticationObjectList.ToString());
			Assert.AreEqual("Y1Z1Y3Z3", aidEntry.AuthorizationResponseCodes.Value);
		}

		[TestMethod]
		public void TestTableLoadRecRequestWith3Entries()
		{
			var request = new TableLoadRecRequest();
			request.Init(new StringReader

			Assert.AreEqual(3, request.Entries.Count);

			Assert.AreEqual("2841020107A000000004101000000000000000000001REDECARD CREDITO030002000200020769862074609066800773    07460906E0F0C8FF80B0F00122FC50ACA0000000000000FC50ACF80000000014R00000000000000000000000000000009F02065F2A029A039C0195059F3704FFFFFFFFFF9F3704FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFY1Z1Y3Z3", request.Entries[0].ToString());
			Assert.AreEqual("2841020207A000000004306000000000000000000002REDECARD DEBITO 030002000200020769862074609066800773    07460906E0F0C8FF80B0F00122FC50ACA0000000000000FC50ACF80000000014R00000000000000000000000000000009F02065F2A029A039C0195059F3704FFFFFFFFFF9F3704FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFY1Z1Y3Z3", request.Entries[1].ToString());
			Assert.AreEqual("2841020307A000000004306000000000000000000006REDECARD COMPRE 030002000200020769862074609066800773    07460906E0F0C8FF80B0F00122FC50ACA0000000000000FC50ACF80000000014R00000000000000000000000000000009F02065F2A029A039C0195059F3704FFFFFFFFFF9F3704FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFY1Z1Y3Z3", request.Entries[2].ToString());
		}

		[TestMethod]
		public void TestTableLoadRecRequestWithCieloPatternEntries()
		{
			var request = new TableLoadRecRequest();
			request.Init(new StringReader("TLR1260206210310021010000000000000000000000000000001CREDITO         0406210311022010000000000000000000000000000002ELECTRON        04"));

			Assert.AreEqual(2, request.Entries.Count);

			Assert.AreEqual("06210310021010000000000000000000000000000001CREDITO         04", request.Entries[0].ToString());
			Assert.AreEqual("06210311022010000000000000000000000000000002ELECTRON        04", request.Entries[1].ToString());
		}

		[TestMethod]
		public void TestTableLoadRecRequestWithAidNullEntry()
		{
			var request = new TableLoadRecRequest();
			request.Init(new StringReader("TLR2860128410101070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));

			Assert.AreEqual(1, request.Entries.Count);

			Assert.AreEqual("28410101070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", request.Entries[0].ToString());
		}
	}
}
